{
  "hash": "d6265139f248e9511c11d5483219d7e0",
  "result": {
    "markdown": "# Control Flow {#ctr-flow-chap}\n\n\n\n## IF\n\nSyntax:\n\n```r\nif (condition) true_action\nif (condition) true_action else false_action\n```\n\n\n\n### Return value of `if`\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- if (TRUE) 3\nx\n#> [1] 3\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- if (FALSE) 3\ny\n#> NULL\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nif(NA) 3\n#> Error in if (NA) 3: missing value where TRUE/FALSE needed\n```\n:::\n\nNote that, however:\n\n::: {.cell}\n\n```{.r .cell-code}\nis.logical(NA)\n#> [1] TRUE\n```\n:::\n\n\n**Use case of `NULL` from `if (FALSE)`**\n\n`c()` and `paste()` drop `NULL` inputs, this allows for a compact expression of certain idioms:\n\n::: {.cell}\n\n```{.r .cell-code}\ngreet <- function(name, birthday = FALSE) {\n  paste0(\n    \"Hi \", name,\n    if (birthday) \" and HAPPY BIRTHDAY\"\n  )\n}\n\ngreet(\"A\")\n#> [1] \"Hi A\"\ngreet(\"A\", birthday = TRUE)\n#> [1] \"Hi A and HAPPY BIRTHDAY\"\n```\n:::\n\n\n## Vectorized IF\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\n\nifelse(x %% 5 == 0, \"XXX\", as.character(x))\n#>  [1] \"1\"   \"2\"   \"3\"   \"4\"   \"XXX\" \"6\"   \"7\"   \"8\"   \"9\"   \"XXX\"\n```\n:::\n\n## Test Vectorized IF\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(emo)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\n```\n:::\n\n\nIf `x` can be divided by:\n\n-    3 return ðŸ§€\n\n-    5 return ðŸš—\n\n-    otherwise, return `x`\n\n\n### `if` with Loop\n\n::: {.cell}\n\n```{.r .cell-code}\nf_loopif <- function(x) {\n  \n  out <- character(length(x))\n  \n  for (i in seq_along(x)) {\n    \n    out[i] <- if (x[i] %% 3 == 0) {\n      \n      ji(\"cheese\")\n      \n    } else if (x[i] %% 5 == 0) {\n      \n      ji(\"car\")\n      \n    } else {\n      x[i]\n    }\n    \n  }\n\n  out\n  \n}\n\nf_loopif(x)\n#>  [1] \"1\"  \"2\"  \"ðŸ§€\" \"4\"  \"ðŸš—\" \"ðŸ§€\" \"7\"  \"8\"  \"ðŸ§€\" \"ðŸš—\"\n```\n:::\n\n### `ifelse` approach\n\n::: {.cell}\n\n```{.r .cell-code}\nf_ifelse <- function(x) {\n  \n  ifelse(x %% 3 == 0, ji(\"cheese\"),\n    ifelse(x %% 5 == 0, ji(\"car\"), x)\n  )\n  \n}\n\nf_ifelse(x)\n#>  [1] \"1\"  \"2\"  \"ðŸ§€\" \"4\"  \"ðŸš—\" \"ðŸ§€\" \"7\"  \"8\"  \"ðŸ§€\" \"ðŸš—\"\n```\n:::\n\n### Logical Subsetting\n\n::: {.cell}\n\n```{.r .cell-code}\nf_subset <- function(x) {\n  \n  out <- character(length(x))\n  \n  # Assign value to location where `x` is: \n  out[x %% 3 == 0] <- ji(\"cheese\") # divided by 3\n  out[x %% 5 == 0] <- ji(\"car\") # divided by 5\n  out[out == \"\"] <- x[out == \"\"] # and the rest\n  out\n}\n\nf_subset(x)\n#>  [1] \"1\"  \"2\"  \"ðŸ§€\" \"4\"  \"ðŸš—\" \"ðŸ§€\" \"7\"  \"8\"  \"ðŸ§€\" \"ðŸš—\"\n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}