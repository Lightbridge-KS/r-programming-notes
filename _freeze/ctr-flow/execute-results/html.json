{
  "hash": "9835bccc5a7208bd98831f557c1a83f3",
  "result": {
    "markdown": "# Control Flow {#ctr-flow-chap}\n\n\n\n## IF\n\nSyntax:\n\n``` r\nif (condition) true_action\nif (condition) true_action else false_action\n```\n\n### Return value of `if`\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- if (TRUE) 3\nx\n#> [1] 3\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- if (FALSE) 3\ny\n#> NULL\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nif(NA) 3\n#> Error in if (NA) 3: missing value where TRUE/FALSE needed\n```\n:::\n\nNote that, however:\n\n::: {.cell}\n\n```{.r .cell-code}\nis.logical(NA)\n#> [1] TRUE\n```\n:::\n\n**Use case of `NULL` from `if (FALSE)`**\n\n`c()` and `paste()` drop `NULL` inputs, this allows for a compact expression of certain idioms:\n\n::: {.cell}\n\n```{.r .cell-code}\ngreet <- function(name, birthday = FALSE) {\n  paste0(\n    \"Hi \", name,\n    if (birthday) \" and HAPPY BIRTHDAY\"\n  )\n}\n\ngreet(\"A\")\n#> [1] \"Hi A\"\ngreet(\"A\", birthday = TRUE)\n#> [1] \"Hi A and HAPPY BIRTHDAY\"\n```\n:::\n\n## Vectorized IF\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\n\nifelse(x %% 5 == 0, \"XXX\", as.character(x))\n#>  [1] \"1\"   \"2\"   \"3\"   \"4\"   \"XXX\" \"6\"   \"7\"   \"8\"   \"9\"   \"XXX\"\n```\n:::\n\n## Test Vectorized IF\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(emo)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\n```\n:::\n\nIf `x` can be divided by:\n\n-   3 return ðŸ§€\n\n-   5 return ðŸš—\n\n-   otherwise, return `x`\n\n### `if` with Loop\n\n::: {.cell}\n\n```{.r .cell-code}\nf_loopif <- function(x) {\n  \n  out <- character(length(x))\n  \n  for (i in seq_along(x)) {\n    \n    out[i] <- if (x[i] %% 3 == 0) {\n      \n      ji(\"cheese\")\n      \n    } else if (x[i] %% 5 == 0) {\n      \n      ji(\"car\")\n      \n    } else {\n      x[i]\n    }\n    \n  }\n\n  out\n  \n}\n\nf_loopif(x)\n#>  [1] \"1\"  \"2\"  \"ðŸ§€\" \"4\"  \"ðŸš—\" \"ðŸ§€\" \"7\"  \"8\"  \"ðŸ§€\" \"ðŸš—\"\n```\n:::\n\n### `ifelse` approach\n\n::: {.cell}\n\n```{.r .cell-code}\nf_ifelse <- function(x) {\n  \n  ifelse(x %% 3 == 0, ji(\"cheese\"),\n    ifelse(x %% 5 == 0, ji(\"car\"), x)\n  )\n  \n}\n\nf_ifelse(x)\n#>  [1] \"1\"  \"2\"  \"ðŸ§€\" \"4\"  \"ðŸš—\" \"ðŸ§€\" \"7\"  \"8\"  \"ðŸ§€\" \"ðŸš—\"\n```\n:::\n\n### Logical Subsetting\n\n::: {.cell}\n\n```{.r .cell-code}\nf_subset <- function(x) {\n  \n  out <- character(length(x))\n  \n  # Assign value to location where `x` is: \n  out[x %% 3 == 0] <- ji(\"cheese\") # divided by 3\n  out[x %% 5 == 0] <- ji(\"car\") # divided by 5\n  out[out == \"\"] <- x[out == \"\"] # and the rest\n  out\n}\n\nf_subset(x)\n#>  [1] \"1\"  \"2\"  \"ðŸ§€\" \"4\"  \"ðŸš—\" \"ðŸ§€\" \"7\"  \"8\"  \"ðŸ§€\" \"ðŸš—\"\n```\n:::\n\n\n### `case_when`\n\n::: {.cell}\n\n```{.r .cell-code}\nf_case_when <- function(x) {\n  dplyr::case_when(\n    x %% 3 == 0 ~ as.character(ji(\"cheese\")),\n    x %% 5 == 0 ~ as.character(ji(\"car\")),\n    TRUE ~ as.character(x)\n  )\n}\n\nf_case_when(x)\n#>  [1] \"1\"  \"2\"  \"ðŸ§€\" \"4\"  \"ðŸš—\" \"ðŸ§€\" \"7\"  \"8\"  \"ðŸ§€\" \"ðŸš—\"\n```\n:::\n\n\n### Benchmark\n\nLet's measure a performance of 3 approachs of control flow over vector.\n\n::: {.cell}\n\n```{.r .cell-code}\nmark_ctrflow <- function(x) {\n  bench::mark(\n    loopif = f_loopif(x), # Loop with if\n    ifelse = f_ifelse(x), # ifelse\n    subset = f_subset(x),  # subset\n    case_when = f_case_when(x) # dplyr::case_when()\n  )\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nresults <- mark_ctrflow(1:10)\nresults\n#> # A tibble: 4 Ã— 6\n#>   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 loopif      184.1Âµs  241.9Âµs     3949.   165.8KB     13.9\n#> 2 ifelse       89.8Âµs  101.9Âµs     7569.    88.1KB     10.4\n#> 3 subset       68.9Âµs   83.9Âµs    10979.   110.4KB     13.9\n#> 4 case_when   198.5Âµs  247.6Âµs     3149.    76.2KB     17.2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::autoplot(results)\n#> Loading required namespace: tidyr\n```\n\n::: {.cell-output-display}\n![](ctr-flow_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: callout-tip\n### Conclusion\n\nIt seems like using **vector subsetting** is the fastest, followed by **`ifelse`**, and then **`dplyr::case_when()`** or **looping over `if`** approach is about the same.\n:::\n",
    "supporting": [
      "ctr-flow_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}